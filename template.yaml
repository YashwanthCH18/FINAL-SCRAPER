AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  scraper-service

  SAM template for deploying the FastAPI Scraper Service to AWS Lambda.

Globals:
  Api:
    Cors:
      AllowOrigin: "'*'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowMethods: "'POST,GET,OPTIONS'"

Parameters:
  SupabaseUrl:
    Type: String
    Description: The URL of the Supabase project.
  SupabaseKey:
    Type: String
    Description: The service_role key for the Supabase project.
    NoEcho: true
  PineconeApiKey:
    Type: String
    Description: The API key for Pinecone.
    NoEcho: true
  PineconeEnvironment:
    Type: String
    Description: The environment for the Pinecone index.
  PineconeIndex:
    Type: String
    Description: The name of the Pinecone index.
  FirecrawlApiKey:
    Type: String
    Description: The API key for Firecrawl.
    NoEcho: true
  RapidApiKey:
    Type: String
    Description: The API key for RapidAPI.
    NoEcho: true
  RapidApiHost:
    Type: String
    Description: The host for the RapidAPI Google Search endpoint.
  BlogCallbackUrl:
    Type: String
    Description: (Optional) The callback URL for the Blog Service.
    Default: ""
  BlogCallbackToken:
    Type: String
    Description: (Optional) The callback token for the Blog Service.
    Default: ""
    NoEcho: true

Resources:
  ScraperFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: scraper_service/
      Handler: app.handler # Points to the Mangum handler in app.py
      Runtime: python3.12
      Architectures:
        - x86_64
      Timeout: 29 # Max timeout for API Gateway
      MemorySize: 512
      Environment:
        Variables:
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_KEY: !Ref SupabaseKey
          PINECONE_API_KEY: !Ref PineconeApiKey
          PINECONE_ENVIRONMENT: !Ref PineconeEnvironment
          PINECONE_INDEX: !Ref PineconeIndex
          FIRECRAWL_API_KEY: !Ref FirecrawlApiKey
          RAPIDAPI_KEY: !Ref RapidApiKey
          RAPIDAPI_HOST: !Ref RapidApiHost
          BLOG_CALLBACK_URL: !Ref BlogCallbackUrl
          BLOG_CALLBACK_TOKEN: !Ref BlogCallbackToken
          # Add worker name so the API function knows who to call
          WORKER_LAMBDA_NAME: !Ref ScraperWorkerFunction
      Events:
        ScraperApi:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: any
        KeepWarmSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
            Name: Scraper-Keep-Warm-Schedule
            Description: "Invokes the Scraper service every 5 minutes to keep it warm."
            Enabled: true
            Input: '{"httpMethod": "GET", "path": "/healthz"}'
      Policies:
        # Grant permission for this function to invoke the worker function
        - LambdaInvokePolicy:
            FunctionName: !Ref ScraperWorkerFunction

  ScraperWorkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: scraper_service/
      Handler: app.worker_handler # A new handler for the worker
      Runtime: python3.12
      Architectures:
        - x86_64
      Timeout: 300 # 5 minutes for the actual scraping job
      MemorySize: 512
      Environment:
        Variables:
          # Pass all secrets and config to the Lambda environment
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_KEY: !Ref SupabaseKey
          PINECONE_API_KEY: !Ref PineconeApiKey
          PINECONE_ENVIRONMENT: !Ref PineconeEnvironment
          PINECONE_INDEX: !Ref PineconeIndex
          FIRECRAWL_API_KEY: !Ref FirecrawlApiKey
          RAPIDAPI_KEY: !Ref RapidApiKey
          RAPIDAPI_HOST: !Ref RapidApiHost
          BLOG_CALLBACK_URL: !Ref BlogCallbackUrl
          BLOG_CALLBACK_TOKEN: !Ref BlogCallbackToken

Outputs:
  ScraperApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for Scraper function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
